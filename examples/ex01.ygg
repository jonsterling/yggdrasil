(computad lists
  (sign types
    (∂ nat type)
    (∂ list type))
  (sign terms
    (∂ zero nat)
    (∂ succ (→ nat nat))
    (∂ add (→ [nat nat] nat))
    (∂ nil list)
    (∂ cons (→ [nat list] list))
    (∂ map (→ [(→ nat nat) list] list)))
  (sign rules
    (∂ map/nil (→ (map succ nil) nil))
    (∂ map/cons (→ (map succ (cons zero nil)) (cons (succ zero) (map succ nil)))))
  (@@analyze (map (λ (∂ x nat) (succ x)) (cons zero nil)))
  (@@analyze (map succ (cons zero nil))))
